# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reddit_pb2 as reddit__pb2


class RedditServiceStub(object):
    """Service API
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/reddit.RedditService/CreatePost',
                request_serializer=reddit__pb2.Post.SerializeToString,
                response_deserializer=reddit__pb2.ApiResponse.FromString,
                )
        self.UpvoteDownvotePost = channel.unary_unary(
                '/reddit.RedditService/UpvoteDownvotePost',
                request_serializer=reddit__pb2.UpvoteDownvoteRequest.SerializeToString,
                response_deserializer=reddit__pb2.ApiResponse.FromString,
                )
        self.RetrievePostContent = channel.unary_unary(
                '/reddit.RedditService/RetrievePostContent',
                request_serializer=reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/reddit.RedditService/CreateComment',
                request_serializer=reddit__pb2.Comment.SerializeToString,
                response_deserializer=reddit__pb2.ApiResponse.FromString,
                )
        self.UpvoteDownvoteComment = channel.unary_unary(
                '/reddit.RedditService/UpvoteDownvoteComment',
                request_serializer=reddit__pb2.UpvoteDownvoteRequest.SerializeToString,
                response_deserializer=reddit__pb2.ApiResponse.FromString,
                )
        self.RetrieveComments = channel.unary_unary(
                '/reddit.RedditService/RetrieveComments',
                request_serializer=reddit__pb2.CommentsRequest.SerializeToString,
                response_deserializer=reddit__pb2.CommentsResponse.FromString,
                )
        self.ExpandCommentBranch = channel.unary_unary(
                '/reddit.RedditService/ExpandCommentBranch',
                request_serializer=reddit__pb2.ExpandRequest.SerializeToString,
                response_deserializer=reddit__pb2.CommentsResponse.FromString,
                )


class RedditServiceServicer(object):
    """Service API
    """

    def CreatePost(self, request, context):
        """create a post
        store post in list
        return general response and post_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvoteDownvotePost(self, request, context):
        """increase or decrease score in post
        return general response and post_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrievePostContent(self, request, context):
        """get post by post_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """create a comment
        store comment in list
        return general response and comment_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvoteDownvoteComment(self, request, context):
        """increase or decrease score in comment
        return general response and comment_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveComments(self, request, context):
        """Retrieving a list of N most upvoted comments under a post
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpandCommentBranch(self, request, context):
        """open most N most upvoted comments under a given
        comment, alongside with N most upvoted comments under those comments
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedditServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=reddit__pb2.Post.FromString,
                    response_serializer=reddit__pb2.ApiResponse.SerializeToString,
            ),
            'UpvoteDownvotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvoteDownvotePost,
                    request_deserializer=reddit__pb2.UpvoteDownvoteRequest.FromString,
                    response_serializer=reddit__pb2.ApiResponse.SerializeToString,
            ),
            'RetrievePostContent': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrievePostContent,
                    request_deserializer=reddit__pb2.PostRequest.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=reddit__pb2.Comment.FromString,
                    response_serializer=reddit__pb2.ApiResponse.SerializeToString,
            ),
            'UpvoteDownvoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvoteDownvoteComment,
                    request_deserializer=reddit__pb2.UpvoteDownvoteRequest.FromString,
                    response_serializer=reddit__pb2.ApiResponse.SerializeToString,
            ),
            'RetrieveComments': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveComments,
                    request_deserializer=reddit__pb2.CommentsRequest.FromString,
                    response_serializer=reddit__pb2.CommentsResponse.SerializeToString,
            ),
            'ExpandCommentBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpandCommentBranch,
                    request_deserializer=reddit__pb2.ExpandRequest.FromString,
                    response_serializer=reddit__pb2.CommentsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reddit.RedditService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RedditService(object):
    """Service API
    """

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/CreatePost',
            reddit__pb2.Post.SerializeToString,
            reddit__pb2.ApiResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvoteDownvotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/UpvoteDownvotePost',
            reddit__pb2.UpvoteDownvoteRequest.SerializeToString,
            reddit__pb2.ApiResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrievePostContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/RetrievePostContent',
            reddit__pb2.PostRequest.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/CreateComment',
            reddit__pb2.Comment.SerializeToString,
            reddit__pb2.ApiResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvoteDownvoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/UpvoteDownvoteComment',
            reddit__pb2.UpvoteDownvoteRequest.SerializeToString,
            reddit__pb2.ApiResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/RetrieveComments',
            reddit__pb2.CommentsRequest.SerializeToString,
            reddit__pb2.CommentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpandCommentBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/ExpandCommentBranch',
            reddit__pb2.ExpandRequest.SerializeToString,
            reddit__pb2.CommentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
